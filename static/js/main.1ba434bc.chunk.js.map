{"version":3,"sources":["types/index.ts","actions/index.ts","components/Student/index.tsx","App.tsx","serviceWorker.ts","reducers/data.ts","reducers/index.ts","index.tsx","store/index.ts"],"names":["NEW_STUDENT","CHANGE_STUDENT","REMOVE_STUDENT","changeStudent","student","type","payload","React","memo","id","name","birthdate","editable","performance","dispatch","useDispatch","useState","setStudent","changeHandler","e","target","value","className","onChange","disabled","options","locale","Russian","date","map","i","key","onClick","title","removeStudent","useSelector","useReduxSelector","App","students","state","data","shallowEqual","s","Date","now","Boolean","window","location","hostname","match","initialState","combineReducers","action","filter","store","middlewares","createLogger","collapsed","middleWareEnhancer","applyMiddleware","createStore","rootReducer","composeWithDevTools","configureStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1ba434bc.chunk.js","sourcesContent":["export interface IStudent {\n    id: number\n    name?: string\n    birthdate?: Date\n    performance?: \"\" | \"неуд\" | \"уд\" | \"хор\" | \"отл\"\n    editable?: boolean\n}\n\nexport const NEW_STUDENT = \"NEW_STUDENT\"\nexport const CHANGE_STUDENT = \"CHANGE_STUDENT\"\nexport const REMOVE_STUDENT = \"REMOVE_STUDENT\"\n\nexport interface INewStudentAction {\n    type: typeof NEW_STUDENT\n    id: number\n}\n\nexport interface IChangeStudentAction {\n    type: typeof CHANGE_STUDENT\n    payload: IStudent\n}\n\nexport interface IRemoveStudentAction {\n    type: typeof REMOVE_STUDENT\n    id: number\n}\n\nexport type StudentActionTypes = INewStudentAction | IChangeStudentAction | IRemoveStudentAction\n","import {\n    NEW_STUDENT,\n    REMOVE_STUDENT,\n    CHANGE_STUDENT,\n    IStudent,\n    INewStudentAction,\n    IChangeStudentAction,\n    IRemoveStudentAction,\n} from \"../types\"\n\nexport function newStudent(id: number): INewStudentAction {\n    return {\n        type: NEW_STUDENT,\n        id,\n    }\n}\n\nexport function changeStudent(student: IStudent): IChangeStudentAction {\n    return {\n        type: CHANGE_STUDENT,\n        payload: student,\n    }\n}\n\nexport function removeStudent(id: number): IRemoveStudentAction {\n    return {\n        type: REMOVE_STUDENT,\n        id,\n    }\n}\n","import React, { useState, ChangeEvent } from \"react\"\nimport { IStudent } from \"../../types\"\nimport { useDispatch } from \"react-redux\"\nimport { removeStudent, changeStudent } from \"../../actions\"\nimport Flatpickr from \"react-flatpickr\"\nimport \"./material_green.css\"\nimport { Russian } from \"flatpickr/dist/l10n/ru.js\"\n\nconst Student: React.FC<IStudent> = ({ id, name = \"\", birthdate, editable = false, performance = \"\" }) => {\n    const dispatch = useDispatch()\n    const [student, setStudent] = useState({\n        id,\n        name,\n        birthdate,\n        editable,\n        performance,\n    })\n    const changeHandler = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {\n        setStudent({ ...student, [e.target.name]: e.target.value })\n    }\n\n    return (\n        <tr className={editable ? \"editable\" : \"\"}>\n            <td>\n                <input type=\"text\" value={student.name} onChange={changeHandler} name=\"name\" disabled={!editable} />\n            </td>\n            <td>\n                <Flatpickr\n                    value={student.birthdate}\n                    options={{ locale: Russian }}\n                    onChange={date => {\n                        setStudent({ ...student, birthdate: date[0] })\n                    }}\n                />\n            </td>\n            <td>\n                <select value={student.performance} disabled={!editable} name=\"performance\" onChange={changeHandler}>\n                    {[\"\", \"неуд\", \"уд\", \"хор\", \"отл\"].map((e, i) => (\n                        <option value={e} key={i}>\n                            {e}\n                        </option>\n                    ))}\n                </select>\n            </td>\n            <td>\n                <div className=\"actions\">\n                    {editable ? (\n                        <button\n                            className=\"btn\"\n                            onClick={() => dispatch(changeStudent({ ...student, editable: false }))}\n                            title=\"Сохранить\"\n                        >\n                            <i className=\"small material-icons\">done</i>\n                        </button>\n                    ) : (\n                        <button\n                            className=\"btn\"\n                            onClick={() => dispatch(changeStudent({ ...student, editable: true }))}\n                            title=\"Редактировать\"\n                        >\n                            <i className=\"small material-icons\">edit</i>\n                        </button>\n                    )}\n                    <button\n                        disabled={!editable}\n                        className=\"btn\"\n                        onClick={() => setStudent({ ...student, name, birthdate, editable: false, performance })}\n                        title=\"Отмена\"\n                    >\n                        <i className=\"small material-icons\">undo</i>\n                    </button>\n                    <button className=\"btn\" onClick={() => dispatch(removeStudent(id))} title=\"Удалить\">\n                        <i className=\"small material-icons\">clear</i>\n                    </button>\n                </div>\n            </td>\n        </tr>\n    )\n}\n\nexport default React.memo(Student)\n","import React from \"react\"\nimport { useSelector as useReduxSelector, shallowEqual, TypedUseSelectorHook, useDispatch } from \"react-redux\"\nimport { AppState } from \"./store\"\nimport { newStudent } from \"./actions\"\nimport Student from \"./components/Student\"\n\nconst useSelector: TypedUseSelectorHook<AppState> = useReduxSelector\n\nconst App: React.FC = () => {\n    const students = useSelector(state => state.data, shallowEqual)\n    const dispatch = useDispatch()\n\n    return (\n        <div className=\"container\">\n            <table className=\"striped\">\n                <thead>\n                    <tr>\n                        <th>ФИО</th>\n                        <th>Дата рождения</th>\n                        <th>Успеваемость</th>\n                        <th></th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {students.map(s => (\n                        <Student {...s} key={s.id} />\n                    ))}\n                </tbody>\n            </table>\n            <button\n                className=\"btn-floating btn-large m20 add\"\n                onClick={() => dispatch(newStudent(Date.now()))}\n                title=\"Добавить\"\n            >\n                <i className=\"small material-icons\">add</i>\n            </button>\n        </div>\n    )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { IStudent, NEW_STUDENT, CHANGE_STUDENT, REMOVE_STUDENT, StudentActionTypes } from \"../types\"\n\nconst initialState: IStudent[] = [\n    { id: 0, name: \"Иван Иванович Иванов\", birthdate: new Date(\"1991-12-10\"), performance: \"хор\" },\n    { id: 1, name: \"Петр Петрович Петров\", birthdate: new Date(\"1999-03-03\") },\n]\n\nexport default function configReducer(state = initialState, action: StudentActionTypes): IStudent[] {\n    switch (action.type) {\n        case NEW_STUDENT:\n            return [...state, { id: action.id, editable: true }]\n        case CHANGE_STUDENT:\n            return state.map(e => (e.id !== action.payload.id ? e : action.payload))\n        case REMOVE_STUDENT:\n            return state.filter(({ id }) => id !== action.id)\n        default:\n            return state\n    }\n}\n","import { combineReducers } from \"redux\"\nimport data from \"./data\"\n\nexport default combineReducers({\n    data,\n})\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport App from \"./App\"\nimport * as serviceWorker from \"./serviceWorker\"\nimport { Provider } from \"react-redux\"\nimport configureStore from \"./store\"\nimport \"./index.css\"\n\nconst store = configureStore()\nconst Root: React.FC = () => (\n    <Provider store={store}>\n        <App />\n    </Provider>\n)\n\nReactDOM.render(<Root />, document.getElementById(\"root\"))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","import { createStore, applyMiddleware } from \"redux\"\nimport { createLogger } from \"redux-logger\"\nimport { composeWithDevTools } from \"redux-devtools-extension\"\nimport rootReducer from \"../reducers\"\n\nexport type AppState = ReturnType<typeof rootReducer>\n\nexport default function configureStore() {\n    const middlewares = [createLogger({ collapsed: true })]\n    const middleWareEnhancer = applyMiddleware(...middlewares)\n    const store = createStore(rootReducer, composeWithDevTools(middleWareEnhancer))\n    return store\n}\n"],"sourceRoot":""}